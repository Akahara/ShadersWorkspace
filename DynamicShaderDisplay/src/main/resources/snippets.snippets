BEGIN Universal constants
#define PI 3.141592
EOS

BEGIN Resolution uniform
uniform vec2 u_resolution;
EOS

BEGIN Time uniform
uniform float u_time;
EOS

BEGIN Texture uniforms, add the texture path as a comment
uniform sampler2D someTexture; // someTexture.png
EOS

BEGIN Geometry shader instanciations
#version 400 core
layout(triangles) in;
layout(invocations = 32) in;
layout(line_strip, max_vertices=24) out;
EOS

BEGIN 2x2 Rotation matrix
mat2 rot2D(float rad) {
  return mat2(
     cos(rad), sin(rad),
    -sin(rad), cos(rad)
  );
}
EOS

BEGIN Perspective projection matrix
mat4 perspectiveProjectionMatrix(float fov, float near, float far) {
  float scale = 1 / tan(fov * PI / 360);
  float zmap = far/(near-far);
  return mat4(
    scale, 0, 0, 0,
    0, scale, 0, 0,
    0, 0, zmap, -1,
    0, 0, zmap*near, 0);
}
EOS

BEGIN Orthographic projection matrix
mat4 orthographicProjectionMatrix(float r, float l, float t, float b, float f, float n) {
	return transpose(mat4(
		2/(r-l), 0, 0, (r+l)/(l-r),
		0, 2/(t-b), 0, (t+b)/(b-t),
		0, 0, 2/(f-n), (f+n)/(n-f),
		0, 0, 0, 1
	));
}
EOS

BEGIN Translation matrix
mat4 translationMatrix(vec3 v) {
	return transpose(mat4(
		1, 0, 0, v.x,
		0, 1, 0, v.y,
		0, 0, 1, v.z,
		0, 0, 0, 1));
}
EOS

BEGIN Scaling matrix
mat4 scalingMatrix(vec3 s) {
	return mat4(
		s.x, 0, 0, 0,
		0, s.y, 0, 0,
		0, 0, s.z, 0,
		0, 0, 0, 1
	);
}
EOS

BEGIN Arbitrary rotation matrix
mat4 rotationMatrix(float yaw, float pitch, float roll) {
  float cy = cos(yaw), sy = sin(yaw);
  float cr = cos(roll), sr = sin(roll);
  float cp = cos(pitch), sp = sin(pitch);
  return mat4(
    cy, -sy, 0, 0,
    sy, cy, 0, 0,
    0, 0, 1, 0,
    0, 0, 0, 1
  ) * mat4(
    cp, 0, sp, 0,
    0, 1, 0, 0,
    -sp, 0, cp, 0,
    0, 0, 0, 1
  ) * mat4(
    1, 0, 0, 0,
    0, cr, -sr, 0,
    0, sr, cr, 0,
    0, 0, 0, 1
  );
}
EOS

BEGIN Random function v2
float rand(vec2 u) {
    return fract(sin(dot(u, vec2(12.9898, 78.233))) * 43758.5453);
}
EOS

BEGIN Random function f1
float rand(float f) {
    return fract(sin(f * 6342.63175) * 43758.5453);
}
EOS

BEGIN Random vector
vec3 randomUnitVector(vec2 u) {
	float z = u.x;
	float phi = u.y;
	float r = sqrt(1-z*z);
	return vec3(z, r*cos(phi), r*sin(phi));
}
EOS

BEGIN Normalize uv (-1..1, -1..1)
vec2 uv = gl_FragCoord.xy/u_resolution.xy*2.-1.;
EOS

BEGIN Normalize uv (0..1, 0..1)
vec2 uv = gl_FragCoord.xy/u_resolution.xy;
EOS

BEGIN Normalize uv (-w/h..w/h, -1..1)
vec2 uv = (gl_FragCoord.xy*2-u_resolution.xy)/u_resolution.y;
EOS

BEGIN Un-normalize vertex
// maps any point in range (-1..1, -1..1) into
// the largest square that fits in the window.
vec2 toGLCoords(vec2 uv) {
	float m = min(u_resolution.y,u_resolution.x)-1;
	return uv*m/u_resolution;
}
EOS

BEGIN Cartesian to polar coordinates
vec2 toPolar(vec2 uv) {
	float theta = uv.x == 0 ? sign(uv.y)*PI/2 : atan(uv.y/uv.x);
	float xs = (sign(uv.x)+1)*.5;
	float ys = (sign(uv.y)+1)*.5;
	theta += (1-xs)*PI+xs*(1-ys)*PI*2;
	float r = length(uv);
	return vec2(r, theta);
}
EOS

BEGIN Cube vertices and indices
vec3[] vertices = vec3[](
	vec3(-.5, -.5, -.5),
	vec3(-.5, -.5, +.5),
	vec3(-.5, +.5, -.5),
	vec3(-.5, +.5, +.5),
	vec3(+.5, -.5, -.5),
	vec3(+.5, -.5, +.5),
	vec3(+.5, +.5, -.5),
	vec3(+.5, +.5, +.5)
);

int[] edgeIndices = int[](0,1, 0,2, 1,3, 2,3, 0,4, 1,5, 2,6, 3,7, 4,5, 4,6, 5,7, 6,7);
EOS

BEGIN Multisampling MSAA Antialiasing
#define AA 2

for(int N = -AA; N <= AA; N++) {
	for(int M = -AA; M <= AA; M++) {
		vec2 o = uv+vec2(N, M)/u_resolution.y;
		col += render(o, t);
	}
}
col /= (2*AA+1)*(2*AA+1);
EOS

BEGIN Lookat projection
mat3 lookAt(vec3 eye, vec3 target, vec3 up, float fov) {
  vec3 w = normalize(target-eye);
  vec3 u = -normalize(cross(up, w)) * fov;
  vec3 v = -normalize(cross(w, u)) * fov;
  return mat3(u, v, w);
}
EOS

BEGIN Hexagons
const vec2 s = vec2(1.7320508, 1);

float hex(in vec2 p) {
  p = abs(p)*2;
  return max(dot(p, s)*.5, p.y);
}

vec4 getHex(vec2 p) {
  vec4 hC = floor(vec4(p, p - vec2(1, .5))/s.xyxy) + .5;
  vec4 h = vec4(p - hC.xy*s, p - (hC.zw + .5)*s);
  return dot(h.xy, h.xy) < dot(h.zw, h.zw) 
      ? vec4(h.xy, hC.xy) 
      : vec4(h.zw, hC.zw + .5);
}
EOS

BEGIN SDF line (2D)
float line(vec2 p1, vec2 p2, vec2 p) {
  vec2 o = p-p1, d = p2-p1;
  float h = clamp(dot(o,d)/dot(d,d), 0., 1.);
  return length(o - d*h);
}
EOS

BEGIN SDF square (2D)
float square(vec2 p) {
  return length(max(vec2(0), abs(p)-1));
}
EOS

BEGIN SDF rectangle (2D)
float rect(vec2 c, vec2 s, vec2 p) {
  return square((p-c)/s);
}
EOS

BEGIN SDF circle (2D)
float circle(vec2 c, float r, vec2 p) {
  return max(0, length(p-c)-r);
}
EOS

BEGIN hsv to rgb
// https://gist.github.com/983/e170a24ae8eba2cd174f
vec3 hsv2rgb(vec3 c)
{
  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}
EOS
